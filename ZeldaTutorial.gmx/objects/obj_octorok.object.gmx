<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_octorok</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Event inheritance
event_inherited(); // Inherit create event code from parent
hp = 4; // HP for this particular enemy
damage = 2; // Damage to player

timer = 0; // Timer initialised to 0. This will be used for shooting.
state = "MOVING"; // Enemy starts off moving
facing = 2; // 0 = up, 1 = right, 2 = down, 3 = left
move_speed = 0.5; // Moves slower than the player (subpixels)
image_speed = 0.2; // Slow down the animation
x_vel = 0; // x &amp; y velocities initialised to 0
y_vel = 0;

// Variables to handle subpixels
spx_vel = 0;
spy_vel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Event inheritance
event_inherited(); // Inherits step event code from parent

// Finite state machine
switch(state)
{
    case "MOVING":
    {
        // Check the direction the enemy is facing
        switch(facing)
        {
            // Facing up
            case 0:
            {
                x_vel = 0;
                y_vel = -move_speed;
                
                image_angle = 180;
            
                break;
            }
            // Facing right
            case 1:
            {
                x_vel = move_speed;
                y_vel = 0;
                
                image_angle = 90;
            
                break;
            }
            // Facing down
            case 2:
            {
                x_vel = 0;
                y_vel = move_speed;
                
                image_angle = 0;
            
                break;
            }
            // Facing left
            case 3:
            {
                x_vel = -move_speed;
                y_vel = 0;
                
                image_angle = 270;
            
                break;
            }
        }
        
        // Enemy has a 1/100 chance of changing direction
        if(irandom(100) == 1)
        {
            facing = choose(0, 1, 2, 3);
        }
        
        // Enemy has a 1/200 chance of shooting
        if(irandom(200) == 1)
        {
            state = "SHOOTING";
            timer = 0;
        }
    
        break;
    }
    case "SHOOTING":
    {
        // Enemy remains stationary while shooting projectile
        x_vel = 0;
        y_vel = 0;
        
        if(timer &lt; 90)
        {
            // Enemy shoots projectile at 60 ticks
            if(timer == 60)
            {
                with(instance_create(x, y, obj_projectile))
                {
                    if(other.facing == 0) direction = 90;
                    if(other.facing == 1) direction = 0;
                    if(other.facing == 2) direction = 270;
                    if(other.facing == 3) direction = 180;
                
                    speed = 4;
                }
            }
            
            // Increment timer
            timer += 1;
        }
        else
        {
            // Return to default moving state after 90 ticks
            state = "MOVING";
        }
    
        break;
    }
}

// Add the x, y velocities to the x, y subpixel velocities
spx_vel += x_vel;
spy_vel += y_vel;

// Round the subpixel velocities up &amp; down to move at the correct speed
newx_vel = round(spx_vel);
newy_vel = round(spy_vel);

// Some frames there is no movement &amp; others there is movement
spx_vel = x_vel - newx_vel;
spy_vel = y_vel - newy_vel;

// Collision checking
// Repeat by the no. of times the player is moving, e.g., player moves 2 pixels at a time,
// repeat twice
repeat(abs(newx_vel))
{
    if(!place_meeting(x + sign(newx_vel), y, obj_solid))
    {
        x += sign(newx_vel);
    }
    else
    {
        // If collision with wall, change direction
        facing = choose(0, 1, 2, 3);
    
        break;
    }
}

repeat(abs(newy_vel))
{
    if(!place_meeting(x, y + sign(newy_vel), obj_solid))
    {
        y += sign(newy_vel);
    }
    else
    {
        // If collision with wall, change direction
        facing = choose(0, 1, 2, 3);
    
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
