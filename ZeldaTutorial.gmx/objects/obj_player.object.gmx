<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_speed = 0.2; // Initialise animation speed

// x, y velocities initialised to 0
x_vel = 0;
y_vel = 0;

player_spd = 2; // Player speed when moving
timer = 0; // Initialise timer variable to 0
state = "IDLE"; // Player starts game not moving, i.e., idle
facing = 0; // Stores the direction that the player faces
            // 0 = up, 1 = right, 2 = down, 3 = left

// Variables to store the sprites to be displayed in each of the states
sprite_walk = spr_player_up;
sprite_attack = spr_player_atk_up;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is called a finite state machine
// Player can get to do one thing at any moment
// During that moment, you have control of what happens
switch(state)
{
    case "IDLE":
    {
        // Stop animating the sprite when the player stops moving
        image_speed = 0;
        
        // Set the default sprite when player is idle
        sprite_index = sprite_walk;
        
        // Stop adding to x/y, i.e., moving the character 
        // when the player stops moving
        x_vel = 0;
        y_vel = 0;
        
        // Change the player state based on keyboard input
        check_inputs_all();
        
        break;
    }
    case "LEFT":
    {
        // Player faces a different direction
        facing = 3;
    
        // Animate sprite when movement occurs
        image_speed = anim_speed;
    
        // Sprite variables change based on state/direction
        sprite_walk = spr_player_side;
        sprite_attack = spr_player_atk_side;
    
        // Change the sprite based on directional input
        sprite_index = sprite_walk;
        
        // Flip the sprite
        image_xscale = -1;
        
        x_vel = -1 * player_spd;
        y_vel = 0;
        
        // Change the player state based on keyboard input
        check_inputs_all();
        
        break;
    }
    case "RIGHT":
    {
        // Player faces a different direction
        facing = 1;
    
        // Animate sprite when movement occurs
        image_speed = anim_speed;
    
        // Sprite variables change based on state/direction
        sprite_walk = spr_player_side;
        sprite_attack = spr_player_atk_side;
    
        // Change the sprite based on directional input
        sprite_index = sprite_walk;
        
        // Flip the sprite
        image_xscale = 1;
        
        x_vel = player_spd;
        y_vel = 0;
        
        // Change the player state based on keyboard input
        check_inputs_all();
        
        break;
    }
    case "UP":
    {
        // Player faces a different direction
        facing = 0;
    
        // Animate sprite when movement occurs
        image_speed = anim_speed;
        
        // Sprite variables change based on state/direction
        sprite_walk = spr_player_up;
        sprite_attack = spr_player_atk_up;
    
        // Change the sprite based on directional input
        sprite_index = sprite_walk;
        
        // Flip the sprite
        image_xscale = 1;
        
        x_vel = 0;
        y_vel = -1 * player_spd;
        
        // Change the player state based on keyboard input
        check_inputs_all();
        
        break;
    }
    case "DOWN":
    {
        // Player faces a different direction
        facing = 2;
    
        // Animate sprite when movement occurs
        image_speed = anim_speed;
    
        // Sprite variables change based on state/direction
        sprite_walk = spr_player_down;
        sprite_attack = spr_player_atk_down;
    
        // Change the sprite based on directional input
        sprite_index = sprite_walk;
        
        // Flip the sprite
        image_xscale = 1;
        
        x_vel = 0;
        y_vel = player_spd;
        
        // Change the player state based on keyboard input
        check_inputs_all();
        
        break;
    }
    case "ATTACK_SWORD_START":
    {
        // Stop animating the sprite when the player starts attacking
        image_speed = 0;
        
        // Stop adding to x/y, i.e., moving the character 
        // when the player attacks
        x_vel = 0;
        y_vel = 0;
        
        // Player pauses for 15 ticks
        timer = 15;
        
        // Change the sprite when attacking
        sprite_index = sprite_attack;
        
        // Change state
        state = "ATTACK_SWORD";
        
        break;
    }
    case "ATTACK_SWORD":
    {
        if(timer == 8)
        {
            // Check the direction the character is facing
            switch(facing)
            {
                // Facing up
                case 0:
                {
                    with(instance_create(x, y - 12, obj_sword))
                    {
                        image_angle = 0;
                    }
                    
                    break;
                }
                // Facing right
                case 1:
                {
                    with(instance_create(x + 12, y, obj_sword))
                    {
                        image_angle = 270;
                    }
                    
                    break;
                }
                // Facing down
                case 2:
                {
                    with(instance_create(x, y + 12, obj_sword))
                    {
                        image_angle = 180;
                    }
                    
                    break;
                }
                // Facing left
                case 3:
                {
                    with(instance_create(x - 12, y, obj_sword))
                    {
                        image_angle = 90;
                    }
                    
                    break;
                }
            }
        }
    
        if(timer &gt; 0)
        {
            // Keep decrementing timer until timer is 0
            timer -= 1;
        }
        else
        {
            // Eventually go back to idle no matter the direction after attack is finished
            state = "IDLE";
        }
        
        break;
    }
}

// Collision checking
// Repeat by the no. of times the player is moving, e.g., player moves 2 pixels at a time,
// repeat twice
repeat(abs(x_vel))
{
    if(!place_meeting(x + sign(x_vel), y, obj_solid))
    {
        x += sign(x_vel);
    }
    else
    {
        break;
    }
}

repeat(abs(y_vel))
{
    if(!place_meeting(x, y + sign(y_vel), obj_solid))
    {
        y += sign(y_vel);
    }
    else
    {
        break;
    }
}

/* Old
// Player's x &amp; y co-ordinates on the screen depends on x_vel &amp; y_vel.
// E.g., x is constantly incremented by x_vel so that the player moves
// to the right.
x += x_vel;
y += y_vel;
*/

/* This is an old, simpler way of setting the speed
// If e.g., right returns true/1 because user inputs right from keyboard,
// x_vel will be a positive player speed (will move to the right).
// If e.g., left returns true/1 because user inputs left from keyboard,
// x_vel will be a negative player speed (will move to the left).
// y_vel is dealt w/ in a similar way.
// Diagonal movement is removed by making sure that the player is not
// holding down a direction perpendicular to the original direction, e.g.,
// if the player moves up/down, first check that x_vel is 0, i.e., no
// left/right movement.
if(abs(y_vel == 0)) x_vel = (input.right - input.left) * player_spd;
if(abs(x_vel == 0)) y_vel = (input.down - input.up) * player_spd;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
