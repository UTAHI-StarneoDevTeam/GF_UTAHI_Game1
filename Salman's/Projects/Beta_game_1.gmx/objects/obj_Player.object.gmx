<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
x_vel = 0;
y_vel = 0;
plr_spd = 2;
timer = 0;
state = "IDLE";
anim_spd = 0.125;
direction = 90;
inv_frames = 0;
hp = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Various states of player, e.g., moving, attacking
if(global.pause) exit;

switch(state)
{
    case "IDLE":
    {
        image_speed = 0;
        image_index = 0;
        x_vel = 0;
        y_vel = 0;
        scr_check_input();
        break;
    }
    case "LEFT":
    {
        image_speed = anim_spd;
        sprite_index = spr_player_side;
        image_xscale = -1;
        direction = 180;
        x_vel = -1 * plr_spd;
        y_vel = 0;
        scr_check_input();
        break;
    }
    case "RIGHT":
    {
        image_speed = anim_spd;
        sprite_index = spr_player_side;
        image_xscale = 1;
        direction = 0;
        x_vel = 1 * plr_spd;
        y_vel = 0;
        scr_check_input();
        break;
    }
    case "UP":
    {
        image_speed = anim_spd;
        sprite_index = spr_player_up;
        image_xscale = 1;
        direction = 90;
        x_vel = 0;
        y_vel = -1 * plr_spd;
        scr_check_input();
        break;
    }
    case "DOWN":
    {
        image_speed = anim_spd;
        sprite_index = spr_player_down;
        image_xscale = 1;
        direction = 270;
        x_vel = 0;
        y_vel = plr_spd;
        scr_check_input();
        break;
    }
    case "ATTACK_SCYTHE_START":
    {
        x_vel = 0;
        y_vel = 0;
        timer = 20;
        image_index = 1;
        image_speed = 0;
        state = "ATTACK_SCYTHE";
        break;
    }
    case "ATTACK_SCYTHE":
    {
        if(timer == 17)
        {
            switch(direction)
            {
                case 0:
                {
                    with(instance_create(x+15, y+5, obj_scythe))
                    {
                        image_angle = 0;
                    }
                    break;
                }
                case 90:
                {
                    with(instance_create(x, y-20, obj_scythe))
                    {
                        image_angle = 90;
                    }
                    break;
                }
                case 180:
                {
                    with(instance_create(x-15, y-5, obj_scythe))
                    {
                        image_angle = 180;
                    }
                    break;
                }
                case 270:
                {
                    with(instance_create(x-10, y+20, obj_scythe))
                    {
                        image_angle = 270;
                    }
                    break;
                }
            }
        }
        if(timer &gt; 0)
        {
            timer--;
        }
        else
        {
            state = "IDLE";
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision checking
scr_check_collision(obj_solid);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interaction with door
if(place_meeting(x, y, obj_door))
{
    if(obj_door.state == "FIRE")
    {
        if(inv_frames == 0)
        {
            inv_frames = 60;
            hp -= obj_door.damage;
        }
    }
    if(obj_door.state == "LOCKED" &amp;&amp; input.start)
    {
        show_message("You need a key to open the door.");
    }
    if(obj_door.state == "UNLOCKED" &amp;&amp; input.start)
    {
        //show_message("Congrats!");
        //game_restart();
        if room = rm_test
            room_goto(rm_2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Opening chest
if(place_meeting(x, y, obj_chest) &amp;&amp; input.start)
{
    if(obj_chest.state == "CLOSED")
    {
        obj_game.treasure++;
        show_message("Treasure obtained! You have " + string(obj_game.treasure) + "x overall");
        obj_chest.state = "OPENED";
    }
    else
    {
        show_message("Chest is empty...");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Count down invincibility frames &amp; game over when HP &lt;= 0
if(inv_frames &gt; 0)
{
    inv_frames--;
}
if(hp &lt;= 0)
{
    show_message("You and your friends are dead. Game over.");
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_switch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get rid of fire
obj_door.state = "LOCKED";

with(other)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unlock the door
obj_door.state = "UNLOCKED";

with(other)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_chest">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Obtain treasure
/*
with(other)
{
    obj_game.treasure++;
    show_message("Treasure obtained! You have " + string(obj_game.treasure) + "x overall");
    instance_destroy();
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_par_enem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set invincibility frames &amp; damage
if(inv_frames == 0)
{
    inv_frames = 60;
    hp -= other.damage;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Invincibility frames flashes
if(inv_frames &gt; 0 &amp;&amp; (inv_frames mod 3 == 0))
{
}
else
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
